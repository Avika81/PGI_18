#include "Max.h" 
 
 double Max::eval() 
 { 
 if (pLeft->eval() > pRight->eval()) 
 return pLeft->eval(); 
 else 
 return pRight->eval(); 
 
 } 
 
 double Max::eval(Assignment & assign) 
 { 
 if (this->pRight->eval(assign) > this->pLeft->eval(assign)) 
 return pRight->eval(assign); 
 else 
 return pLeft->eval(assign); 
 } 
 
 std::string Max::toString() const 
 { 
 string output = "Max("; 
 output += pLeft->toString(); 
 output += ","; 
 output += pRight->toString(); 
 output += ")"; 
 return output; 
 } 
 
 Expression * Max::deepCopy() 
 { 
 Max* temp; 
 temp = new Max; 
 temp->pLeft = this->pLeft->deepCopy(); 
 temp->pRight = this->pRight->deepCopy(); 
 return temp; 
 } 
 
 Expression* Max::assign(char Symbol, Expression * expr) 
 { 
 Max* temp; 
 temp = new Max; 
 temp->pLeft = this->pLeft->assign(Symbol, expr); 
 temp->pRight = this->pRight->assign(Symbol, expr); 
 return temp; 
 } 
 
 Max::Max() 
 { 
 } 
 
 
 Max::~Max() 
 { 
 } 
 #include "Min.h" 
 
 double Min::eval() 
 { 
 if (pLeft->eval() < pRight->eval()) 
 return pLeft->eval(); 
 else 
 return pRight->eval(); 
 
 } 
 
 double Min::eval(Assignment & assign) 
 { 
 if (this->pRight->eval(assign) < this->pLeft->eval(assign)) 
 return pRight->eval(assign); 
 else 
 return pLeft->eval(assign); 
 } 
 
 std::string Min::toString() const 
 { 
 string output = "Min("; 
 output += pLeft->toString(); 
 output += ","; 
 output += pRight->toString(); 
 output += ")"; 
 return output; 
 } 
 
 Expression * Min::deepCopy() 
 { 
 Min* temp; 
 temp = new Min; 
 temp->pLeft = this->pLeft->deepCopy(); 
 temp->pRight = this->pRight->deepCopy(); 
 return temp; 
 } 
 
 Expression* Min::assign(char Symbol, Expression * expr) 
 { 
 Min* temp; 
 temp = new Min; 
 temp->pLeft = this->pLeft->assign(Symbol, expr); 
 temp->pRight = this->pRight->assign(Symbol, expr); 
 return temp; 
 } 
 
 
 Min::Min() 
 { 
 } 
 
 
 Min::~Min() 
 { 
 } 
 #include "Div.h" 
 
 double Div::eval() 
 { 
 return pLeft->eval() / pRight->eval(); 
 } 
 
 double Div::eval(Assignment & assign) 
 { 
 return pLeft->eval(assign) - pRight->eval(assign); 
 } 
 
 std::string Div::toString() const 
 { 
 string output = ""; 
 output += pLeft->toString(); 
 output += "/"; 
 output += pRight->toString(); 
 return output; 
 } 
 
 Expression * Div::deepCopy() 
 { 
 Div* temp; 
 temp = new Div; 
 temp->pLeft = this->pLeft->deepCopy(); 
 temp->pRight = this->pRight->deepCopy(); 
 return temp; 
 } 
 
 Expression* Div::assign(char Symbol, Expression * expr) 
 { 
 Div* temp; 
 temp = new Div; 
 temp->pLeft = this->pLeft->assign(Symbol, expr); 
 temp->pRight = this->pRight->assign(Symbol, expr); 
 return temp; 
 } 
 
 
 Div::Div() 
 { 
 } 
 
 
 Div::~Div() 
 { 
 } 
 #include "Abs.h" 
 
 double Abs::eval() 
 { 
 return abs(m_expr->eval()); 
 } 
 
 double Abs::eval(Assignment & assign) 
 { 
 return abs((m_expr->eval(assign))); 
 } 
 
 std::string Abs::toString() const 
 { 
 string output = ""; 
 output += "|"; 
 output += m_expr->toString(); 
 output += "|"; 
 return output; 
 } 
 
 Expression * Abs::deepCopy() 
 { 
 Abs* temp; 
 temp = new Abs; 
 temp->m_expr = this->m_expr; 
 return temp; 
 } 
 
 Expression * Abs::assign(char Symbol, Expression * expr) 
 { 
 Abs* temp; 
 temp = new Abs; 
 temp->m_expr = m_expr->assign(Symbol, expr); 
 return temp; 
 } 
 
 Abs::Abs() 
 { 
 } 
 
 
 Abs::~Abs() 
 { 
 } 
 #include "Mul.h" 
 
 double Mul::eval() 
 { 
 return pLeft->eval() * pRight->eval(); 
 } 
 
 double Mul::eval(Assignment & assign) 
 { 
 return pLeft->eval(assign) * pRight->eval(assign); 
 } 
 
 std::string Mul::toString() const 
 { 
 string output = ""; 
 output += pLeft->toString(); 
 output += "*"; 
 output += pRight->toString(); 
 return output; 
 } 
 
 Expression * Mul::deepCopy() 
 { 
 Mul* temp; 
 temp = new Mul; 
 temp->pLeft = this->pLeft->deepCopy(); 
 temp->pRight = this->pRight->deepCopy(); 
 return temp; 
 } 
 
 Expression* Mul::assign(char Symbol, Expression * expr) 
 { 
 Mul* temp; 
 temp = new Mul; 
 temp->pLeft = this->pLeft->assign(Symbol, expr); 
 temp->pRight = this->pRight->assign(Symbol, expr); 
 return temp; 
 } 
 
 Mul::Mul() 
 { 
 } 
 
 
 Mul::~Mul() 
 { 
 } 
 #include "Neg.h" 
 
 
 
 double Neg::eval() 
 { 
 return -(m_expr->eval()); 
 } 
 
 double Neg::eval(Assignment & assign) 
 { 
 return -(m_expr->eval(assign)); 
 } 
 
 std::string Neg::toString() const 
 { 
 string output = ""; 
 output += "-"; 
 output += m_expr->toString(); 
 return output; 
 } 
 
 Expression * Neg::deepCopy() 
 { 
 Neg* temp; 
 temp = new Neg; 
 temp->m_expr = this->m_expr; 
 return temp; 
 } 
 
 Expression * Neg::assign(char Symbol, Expression * expr) 
 { 
 Neg* temp; 
 temp = new Neg; 
 temp->m_expr = m_expr->assign(Symbol, expr); 
 return temp; 
 } 
 
 Neg::Neg() 
 { 
 } 
 
 
 Neg::~Neg() 
 { 
 } 
 #include "Pow.h" 
 
 double Pow::eval() 
 { 
 return pow(this->pRight->eval(), this->pLeft->eval()); 
 } 
 
 double Pow::eval(Assignment & assign) 
 { 
 return pow(this->pRight->eval(assign),this->pLeft->eval(assign)); 
 } 
 
 std::string Pow::toString() const 
 { 
 string output = ""; 
 output += pLeft->toString(); 
 output += "^"; 
 output += pRight->toString(); 
 return output; 
 } 
 
 Expression * Pow::deepCopy() 
 { 
 Pow* temp; 
 temp = new Pow; 
 temp->pLeft = this->pLeft->deepCopy(); 
 temp->pRight = this->pRight->deepCopy(); 
 return temp; 
 } 
 
 Expression* Pow::assign(char Symbol, Expression * expr) 
 { 
 Pow* temp; 
 temp = new Pow; 
 temp->pLeft = this->pLeft->assign(Symbol, expr); 
 temp->pRight = this->pRight->assign(Symbol, expr); 
 return temp; 
 } 
 
 Pow::Pow() 
 { 
 } 
 
 
 Pow::~Pow() 
 { 
 } 
 #include "Sub.h" 
 
 double Sub::eval() 
 { 
 return pLeft->eval() - pRight->eval(); 
 } 
 
 double Sub::eval(Assignment & assign) 
 { 
 return pLeft->eval(assign) - pRight->eval(assign); 
 } 
 
 std::string Sub::toString() const 
 { 
 string output = ""; 
 output += pLeft->toString(); 
 output += "-"; 
 output += pRight->toString(); 
 return output; 
 } 
 
 Expression * Sub::deepCopy() 
 { 
 Sub* temp; 
 temp = new Sub; 
 temp->pLeft = this->pLeft->deepCopy(); 
 temp->pRight = this->pRight->deepCopy(); 
 return temp; 
 } 
 
 Expression* Sub::assign(char Symbol, Expression * expr) 
 { 
 Sub* temp; 
 temp = new Sub; 
 temp->pLeft = this->pLeft->assign(Symbol, expr); 
 temp->pRight = this->pRight->assign(Symbol, expr); 
 return temp; 
 } 
 
 Sub::Sub() 
 { 
 } 
 
 
 Sub::~Sub() 
 { 
 } 
 #include "Sum.h" 
 
 
 
 double Sum::eval() 
 { 
 return pLeft->eval()+pRight->eval(); 
 } 
 
 double Sum::eval(Assignment & assign) 
 { 
 return pLeft->eval(assign) + pRight->eval(assign); 
 } 
 
 std::string Sum::toString() const 
 { 
 string output = ""; 
 output += pLeft->toString(); 
 output += "+"; 
 output += pRight->toString(); 
 return output; 
 } 
 
 Expression * Sum::deepCopy() 
 { 
 Sum* temp; 
 temp = new Sum; 
 temp->pLeft = this->pLeft->deepCopy(); 
 temp->pRight = this->pRight->deepCopy(); 
 return temp; 
 } 
 
 Expression* Sum::assign(char Symbol, Expression * expr) 
 { 
 Sum* temp; 
 temp = new Sum; 
 temp->pLeft = this->pLeft->assign(Symbol, expr); 
 temp->pRight = this->pRight->assign(Symbol, expr); 
 return temp; 
 } 
 
 Sum::Sum() 
 { 
 } 
 
 
 Sum::~Sum() 
 { 
 } 
 
